#!/usr/bin/env node

var debug = require('debug')('rm-webhook-migrate:cli');
var fs = require('fs');
var extend = require('xtend');

var mapArgumentsToOptions = require('webhook-migrate').mapArgumentsToOptions;

var mediaConfPath = getUserHome() + '/.risdmedia/wh.json';
var mediaConfRequiredKeys = ['server'];
var mediaConf = getConf(mediaConfPath, mediaConfRequiredKeys);

var whConfPath = '.firebase.conf';
var whConfRequiredKeys = ['secretKey', 'siteName'];
var firebaseConf = getConf(whConfPath, whConfRequiredKeys);

var mediaOptions = {
  uploadUrl: ( mediaConf.server.startsWith( 'http' ) ? mediaConf.server :  'http://' ) + '/upload-url/'
};

var optionsFromArguments = mapArgumentsToOptions(process.argv);

var options = extend(firebaseConf, optionsFromArguments, mediaOptions);
var backup = options.backup;
delete options.backup;

debug(options);

require('../')(backup, options, function ( error, updatedBackup ) {
  if ( error ) return console.log( error )
  debug( 'updated-backup:' + updatedBackup )
});

function getUserHome() {
  return process.env[
      (process.platform == 'win32') ?
        'USERPROFILE' : 'HOME'
    ];
}

function getConf (path, requiredKeys) {
  try {
    var conf = JSON.parse(
      fs.readFileSync(path)
        .toString());
  } catch (e) {
    console.log(
      'Requires a configuration file at ', path);
    return undefined;
  }

  var requiredKeysNotFound = requiredKeys
    .filter(function ensureRequired (key) {
      // they key is not in the conf
      return !(key in conf);
    });

  if (requiredKeysNotFound.length > 0) {
    requiredKeysNotFound
      .forEach(function (key) {
        console.log(
          'Configuration at path: ' + path + '\n',
          'requires a value for key: ', key);
      });
    return undefined;
  }
  else {
    return conf;
  }
}
